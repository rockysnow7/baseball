from tqdm import tqdm

import csv
import json
import os


FEATURES = ['setting.date.year', 'setting.date.month', 'setting.date.day', 'home_team.team_id', 'home_team.batting_stats.games_played', 'home_team.batting_stats.ground_outs', 'home_team.batting_stats.air_outs', 'home_team.batting_stats.runs', 'home_team.batting_stats.doubles', 'home_team.batting_stats.triples', 'home_team.batting_stats.home_runs', 'home_team.batting_stats.strike_outs', 'home_team.batting_stats.base_on_balls', 'home_team.batting_stats.intentional_walks', 'home_team.batting_stats.hits', 'home_team.batting_stats.hit_by_pitch', 'home_team.batting_stats.avg', 'home_team.batting_stats.at_bats', 'home_team.batting_stats.obp', 'home_team.batting_stats.slg', 'home_team.batting_stats.ops', 'home_team.batting_stats.caught_stealing', 'home_team.batting_stats.stolen_bases', 'home_team.batting_stats.stolen_base_percentage', 'home_team.batting_stats.ground_into_double_play', 'home_team.batting_stats.number_of_pitches', 'home_team.batting_stats.plate_appearances', 'home_team.batting_stats.total_bases', 'home_team.batting_stats.rbi', 'home_team.batting_stats.left_on_base', 'home_team.batting_stats.sac_bunts', 'home_team.batting_stats.sac_flies', 'home_team.batting_stats.babip', 'home_team.batting_stats.ground_outs_to_airouts', 'home_team.batting_stats.at_bats_per_home_run', 'home_team.pitching_stats.games_played', 'home_team.pitching_stats.games_started', 'home_team.pitching_stats.ground_outs', 'home_team.pitching_stats.air_outs', 'home_team.pitching_stats.runs', 'home_team.pitching_stats.doubles', 'home_team.pitching_stats.triples', 'home_team.pitching_stats.home_runs', 'home_team.pitching_stats.strike_outs', 'home_team.pitching_stats.base_on_balls', 'home_team.pitching_stats.intentional_walks', 'home_team.pitching_stats.hits', 'home_team.pitching_stats.hit_by_pitch', 'home_team.pitching_stats.avg', 'home_team.pitching_stats.at_bats', 'home_team.pitching_stats.era', 'home_team.pitching_stats.innings_pitched', 'home_team.pitching_stats.wins', 'home_team.pitching_stats.losses', 'home_team.pitching_stats.ties', 'home_team.pitching_stats.saves', 'home_team.pitching_stats.save_opportunities', 'home_team.pitching_stats.holds', 'home_team.pitching_stats.blown_saves', 'home_team.pitching_stats.earned_runs', 'home_team.pitching_stats.whip', 'home_team.pitching_stats.batters_faced', 'home_team.pitching_stats.outs', 'home_team.pitching_stats.games_pitched', 'home_team.pitching_stats.complete_games', 'home_team.pitching_stats.shutouts', 'home_team.pitching_stats.strikes', 'home_team.pitching_stats.strike_percentage', 'home_team.pitching_stats.hit_batsmen', 'home_team.pitching_stats.balks', 'home_team.pitching_stats.wild_pitches', 'home_team.pitching_stats.pickoffs', 'home_team.pitching_stats.ground_outs_to_airouts', 'home_team.pitching_stats.win_percentage', 'home_team.pitching_stats.pitches_per_inning', 'home_team.pitching_stats.games_finished', 'home_team.pitching_stats.strikeout_walk_ratio', 'home_team.pitching_stats.strikeouts_per_9inn', 'home_team.pitching_stats.walks_per_9inn', 'home_team.pitching_stats.hits_per_9inn', 'home_team.pitching_stats.runs_scored_per_9', 'home_team.pitching_stats.home_runs_per_9', 'home_team.pitching_stats.sac_bunts', 'home_team.pitching_stats.sac_flies', 'home_team.fielding_stats.games_played', 'home_team.fielding_stats.games_started', 'home_team.fielding_stats.assists', 'home_team.fielding_stats.put_outs', 'home_team.fielding_stats.errors', 'home_team.fielding_stats.chances', 'home_team.fielding_stats.fielding', 'home_team.fielding_stats.range_factor_per_game', 'home_team.fielding_stats.range_factor_per_9inn', 'home_team.fielding_stats.innings', 'home_team.fielding_stats.games', 'home_team.fielding_stats.double_plays', 'home_team.fielding_stats.triple_plays', 'home_team.fielding_stats.throwing_errors', 'away_team.team_id', 'away_team.batting_stats.games_played', 'away_team.batting_stats.ground_outs', 'away_team.batting_stats.air_outs', 'away_team.batting_stats.runs', 'away_team.batting_stats.doubles', 'away_team.batting_stats.triples', 'away_team.batting_stats.home_runs', 'away_team.batting_stats.strike_outs', 'away_team.batting_stats.base_on_balls', 'away_team.batting_stats.intentional_walks', 'away_team.batting_stats.hits', 'away_team.batting_stats.hit_by_pitch', 'away_team.batting_stats.avg', 'away_team.batting_stats.at_bats', 'away_team.batting_stats.obp', 'away_team.batting_stats.slg', 'away_team.batting_stats.ops', 'away_team.batting_stats.caught_stealing', 'away_team.batting_stats.stolen_bases', 'away_team.batting_stats.stolen_base_percentage', 'away_team.batting_stats.ground_into_double_play', 'away_team.batting_stats.number_of_pitches', 'away_team.batting_stats.plate_appearances', 'away_team.batting_stats.total_bases', 'away_team.batting_stats.rbi', 'away_team.batting_stats.left_on_base', 'away_team.batting_stats.sac_bunts', 'away_team.batting_stats.sac_flies', 'away_team.batting_stats.babip', 'away_team.batting_stats.ground_outs_to_airouts', 'away_team.batting_stats.at_bats_per_home_run', 'away_team.pitching_stats.games_played', 'away_team.pitching_stats.games_started', 'away_team.pitching_stats.ground_outs', 'away_team.pitching_stats.air_outs', 'away_team.pitching_stats.runs', 'away_team.pitching_stats.doubles', 'away_team.pitching_stats.triples', 'away_team.pitching_stats.home_runs', 'away_team.pitching_stats.strike_outs', 'away_team.pitching_stats.base_on_balls', 'away_team.pitching_stats.intentional_walks', 'away_team.pitching_stats.hits', 'away_team.pitching_stats.hit_by_pitch', 'away_team.pitching_stats.avg', 'away_team.pitching_stats.at_bats', 'away_team.pitching_stats.era', 'away_team.pitching_stats.innings_pitched', 'away_team.pitching_stats.wins', 'away_team.pitching_stats.losses', 'away_team.pitching_stats.ties', 'away_team.pitching_stats.saves', 'away_team.pitching_stats.save_opportunities', 'away_team.pitching_stats.holds', 'away_team.pitching_stats.blown_saves', 'away_team.pitching_stats.earned_runs', 'away_team.pitching_stats.whip', 'away_team.pitching_stats.batters_faced', 'away_team.pitching_stats.outs', 'away_team.pitching_stats.games_pitched', 'away_team.pitching_stats.complete_games', 'away_team.pitching_stats.shutouts', 'away_team.pitching_stats.strikes', 'away_team.pitching_stats.strike_percentage', 'away_team.pitching_stats.hit_batsmen', 'away_team.pitching_stats.balks', 'away_team.pitching_stats.wild_pitches', 'away_team.pitching_stats.pickoffs', 'away_team.pitching_stats.ground_outs_to_airouts', 'away_team.pitching_stats.win_percentage', 'away_team.pitching_stats.pitches_per_inning', 'away_team.pitching_stats.games_finished', 'away_team.pitching_stats.strikeout_walk_ratio', 'away_team.pitching_stats.strikeouts_per_9inn', 'away_team.pitching_stats.walks_per_9inn', 'away_team.pitching_stats.hits_per_9inn', 'away_team.pitching_stats.runs_scored_per_9', 'away_team.pitching_stats.home_runs_per_9', 'away_team.pitching_stats.sac_bunts', 'away_team.pitching_stats.sac_flies', 'away_team.fielding_stats.games_played', 'away_team.fielding_stats.games_started', 'away_team.fielding_stats.assists', 'away_team.fielding_stats.put_outs', 'away_team.fielding_stats.errors', 'away_team.fielding_stats.chances', 'away_team.fielding_stats.fielding', 'away_team.fielding_stats.range_factor_per_game', 'away_team.fielding_stats.range_factor_per_9inn', 'away_team.fielding_stats.innings', 'away_team.fielding_stats.games', 'away_team.fielding_stats.double_plays', 'away_team.fielding_stats.triple_plays', 'away_team.fielding_stats.throwing_errors', 'result.home_team_score', 'result.away_team_score']
total_data = {key: [] for key in FEATURES}


def get_value_from_feature_key(data: dict, feature_key: str) -> str:
    keys = feature_key.split(".")
    value = data
    for key in keys:
        value = value[key]
    return value


for year in os.listdir("data"):
    if year == "data.csv" or year == "progress.json":
        continue

    for home_team_id in tqdm(os.listdir(f"data/{year}")):
        for date in os.listdir(f"data/{year}/{home_team_id}"):
            with open(f"data/{year}/{home_team_id}/{date}", "r") as f:
                data = json.load(f)

            for feature in FEATURES:
                total_data[feature].append(get_value_from_feature_key(data, feature))


with open("data/data.csv", "w") as f:
    writer = csv.writer(f)
    writer.writerow(FEATURES)
    rows = zip(*[total_data[feature] for feature in FEATURES])
    writer.writerows(rows)
